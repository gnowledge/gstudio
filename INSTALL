* INSTALLATION Procedure for for gstudio-mongokit

If you are on a debian or Ubuntu PC install the following packages.
Use corresponding package names if you are using an RPM based distro
(fedora or centos). 


1. Installing required packages and its dependencies
	
    (1) sudo apt-get install python-setuptools git build-essential python-dev rcs mongodb emacs24 python-virtualenv libjpeg-dev ffmpeg ffmpeg2theora

2. Get latest version of gstudio-mongokit -  Try one of the following commands:

    (1) git clone git@github.com:gnowledge/gstudio.git  
    (2) git clone https://github.com/gnowledge/gstudio.git

3. Set up virtual environment for gstudio-mongokit

    (1) cd gstudio
    (2) virtualenv --system-site-packages .      # NOTE: Here '.' indicates current directory
    (3) source bin/activate                      # Activates virtual environment [To deactivate, please use given command - "deactivate"]
    (4) ./bin/pip install -r requirements.txt    # NOTE: Here '.' indicates current directory

3. In case your distribution of GNU/Linux is not latest, you may not
   find emacs24 in your repositories. In that case, satisfy the requirement
   by following these instructions:

    (1) sudo add-apt-repository ppa:cassou/emacs
    (2) sudo apt-get update
    (3) sudo apt-get install emacs24 emacs24-el emacs24-common-non-dfsg

4. Setting up Emacs working environment:

   Create an init file for emacs's default settings at given path "~/.emacs"
   with following code in it:

   NOTE: How to get org-version?
	 (1) Open emacs editor
	 (2) Press Alt + "X"
	 (3) Enter following command - org-version [Then Press Enter]

   (a) For org-version < 8.0: Copy following lines of code in above specified file and save it
	(custom-set-variables
	  '(inhibit-startup-screen t)
	  '(org-export-html-preamble nil)
	  '(org-export-html-postamble nil)
	)

   (b) For org-version >= 8.0: : Copy following lines of code in above specified file and save it
	(custom-set-variables
	  '(inhibit-startup-screen t)
	  '(org-html-preamble nil)
	  '(org-html-postamble nil)
	)

5. SMTP configuration for notifications
 
   (1) To make SMTP server ready for sending mail (development purpose only) -

       There are two options: 
       1. After running project, run following command: python -m
          smtpd -n -c DebuggingServer localhost:1025 (This will ready
          to listen smtp messages and will print in terminal)

       2. To use gmail smtp server: (If you have another smarthost to
          deliver use that instead)
	
	(a) Go to settings.py file and search for "#SMTP setting for
	sending mail" and uncomment gmail smtp setting and comment
	default python smtp settings.  

	(b) Edit following with your gmail credentials and save
	settings.py file - EMAIL_HOST_USER = 'yourcompleteemailid'
	EMAIL_HOST_PASSWORD = 'yourpassword'
						 
6. Install JS/CSS dependencies with Bower:
    
    (1) Activate your virtual environment: 
        source bin/activate

    (2) A tool to create isolated node.js environment which is integrated 
        with environment built by python virtualenv: 
        pip install nodeenv

    (3) Appending nodeenv settings to virtualenv: (This takes time .. wait till it complete)
        nodeenv --python-virtualenv

        If above step gives an error, install NodeJS at root level with following commands:  
          (a) sudo add-apt-repository ppa:chris-lea/node.js
          (b) sudo apt-get update
          (c) sudo apt-get install python-software-properties python g++ make nodejs

    (4) Installing Bower:
        sudo npm install -g bower

    (5) To install JS/CSS dependencies: (Be there at project root level)
        bower install

7. Installation of MathJax (required for rendering MathML symbols)
   
    (1) To install MathJax on your own server, download the
        distribution from the following link:
        "http://www.mathjax.org/download/" 

    (2) Simply unzip the downloaded archive, rename it to 'mathjax'
        (all in smallcaps) and put it under django-application's
        "static" directory.


8. To run "gstudio-mongokit" project, perform following steps: 

    (1) Make sure you are in the virtualenv-folder and it's activated
        (source bin/activate).  

    (2) Move to folder where your "manage.py" file resides: cd gstudio/gnowsys-ndf 

    (3) Start mongodb server: sudo service mongodb start 

    (4) Run the following commands: 

        (a) python manage.py initrcsrepo 

        (b) python manage.py syncdb

        (c) python manage.py filldb 

        (d) python manage.py runserver 


* After running (d) point your browser to http://localhost:8000 to see
  gstudio on your browser.  Enjoy.  

* Since gstudio is frequently updated, please obtain the latest code
  from git repo. After each update run (b) & (c) commands before running (d).

* Any issues with this procedure or you need any further help, or to
  file bugs etc. visit ask us in the mailing list:

  - http://gnowledge.org/cgi-bin/mailman/listinfo/gnowsys-dev

